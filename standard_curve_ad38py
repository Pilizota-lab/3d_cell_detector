import numpy as np
import matplotlib.pyplot as plt

# Data for AD38 0.88 (frozen stock) including origin
od_values = [8.3, 5.8, 3.7,1.2, 0.60, 0.49, 0.32, 0.21]
cfu_values = [5.0e9, 2.0e9, 1.0e9,4.0e8, 1.9e8, 9.0e7, 5e7, 9.0e6]
std_devs = [4.0e06, 1.20e7, 1.95e06, 1.89E+06, 3.38E+05, 1.86E+05, 1.60E+05, 1.53E+04]

# Convert to numpy arrays
od_array = np.array(od_values)
cfu_array = np.array(cfu_values)
std_array = np.array(std_devs)

# Linear regression forced through origin (no intercept)
slope, _, _, _ = np.linalg.lstsq(od_array.reshape(-1, 1), cfu_array, rcond=None)
intercept = 0

# Create line of best fit, starting at 0
line_x = np.linspace(0, max(od_array) * 1.1, 100)
line_y = slope * line_x

# Plot
plt.figure(figsize=(10, 6))
plt.errorbar(od_array, cfu_array, yerr=std_array, fmt='o', capsize=6, color='blue', alpha=0.4, label='Data points')
plt.plot(line_x, line_y, color='black', label='Best fit line (through origin)')

# Axes and labels
plt.xlabel('OD Values')
plt.ylabel('CFU/ml')
plt.title('OD vs CFU Count (AD38 grown from frozen stock)')
plt.xlim(left=0)
plt.ylim(bottom=0)
plt.grid(False)
plt.legend(loc='upper left')

# Add regression equation
equation = f'CFU = {slope[0]:.2e}Ã—OD'
plt.text(0.01, 0.85, equation,
         transform=plt.gca().transAxes,
         horizontalalignment='left',
         verticalalignment='bottom',
         fontsize=10,
         bbox=dict(facecolor='white', alpha=0.6))

plt.tight_layout()
plt.show()

# Output regression slope
print(f"Slope (CFU/OD): {slope[0]:.4e}")
